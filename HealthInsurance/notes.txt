sql migrations - sql tools
api endpoints test - swashbuckle swagger
ORM - entity framework
authentication/authorization -aspnetcore.authentication.jwtbearer

- Swashbuckle.aspnetcore.swagger.ui
- Swashbuckle.aspnetcore.annotations
- Microsoft.aspnetcore.authentication.jwtbearer
- Microsoft.EntityFrameworkCore.sqlserver
- Microsoft.EntityFrameworkCore.tools

Add service to program.cs:
builder.Services.AddDbContext<ApplicationDbContext>(options=>options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

- when performing data migrationi commands, it should be on the prject that has the applicationdbcontext. That's where the database is migrated from.

Add db configuration to appsettings.json:
  "ConnectionStrings": {
    "DefaultConnection": "Server=.\\;Database=HealthInsurance;Trusted_Connection=True;MultipleActiveResultSets=true"
  },


Do your migration by:
- opening PM console. Make sure default project is the once containing ApplicationDbContect.cs file (Mango.Services.ProductAPI)
- add-migration AddProductModelToDb
- update-database


register the jwtservice in program.cs middleware:
First Add key to appsettings.json:
  "Jwt": {
    "Issuer": "https://crosquaretwenty.com",
    "Audience": "https://crosquaretwenty.com",
    "Key": "This is nothing but a sample. Change in production abeg"
  }

Then register service and enable authentication and authorization:
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(o =>
{
    o.TokenValidationParameters = new TokenValidationParameters
    {
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey
        (Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"])),
        ValidateIssuer = false,
        ValidateAudience = false,
        ValidateLifetime = false,
        ValidateIssuerSigningKey = true,
        ClockSkew = Debugger.IsAttached ? TimeSpan.Zero : TimeSpan.FromMinutes(10)
    };
});
builder.Services.AddAuthentication();



app.UseAuthentication();
app.UseAuthorization();


Create model to store username and password to login in API:
public class LoginThings
{
    public string UserName { get; set; }
    public string Password { get; set; }
}

